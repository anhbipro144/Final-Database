// <auto-generated />
using System;
using Final.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Final.Migrations
{
    [DbContext(typeof(FinalContext))]
    [Migration("20221227032718_Models2")]
    partial class Models2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Final.Models.Customer", b =>
                {
                    b.Property<int?>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("customerId"));

                    b.Property<int?>("personId")
                        .HasColumnType("int");

                    b.HasKey("customerId");

                    b.HasIndex("personId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Final.Models.EmployedAt", b =>
                {
                    b.Property<int?>("RetailChainretailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("employedSince")
                        .HasColumnType("datetime2");

                    b.Property<int?>("retailId")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("staffId")
                        .HasColumnType("int");

                    b.HasIndex("RetailChainretailId");

                    b.HasIndex("staffId");

                    b.ToTable("EmployedAts");
                });

            modelBuilder.Entity("Final.Models.Inventory", b =>
                {
                    b.Property<int?>("inventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("inventoryId"));

                    b.Property<int?>("RetailChainretailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("lastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("productId")
                        .HasColumnType("int");

                    b.Property<string>("productId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.Property<int?>("retailId")
                        .HasColumnType("int");

                    b.HasKey("inventoryId");

                    b.HasIndex("RetailChainretailId");

                    b.HasIndex("productId1");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Final.Models.Order", b =>
                {
                    b.Property<int?>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("orderId"));

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("personId")
                        .HasColumnType("int");

                    b.Property<decimal?>("subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("orderId");

                    b.HasIndex("personId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Final.Models.Person", b =>
                {
                    b.Property<int?>("personId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("personId"));

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("personId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Final.Models.Product", b =>
                {
                    b.Property<string>("productId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("productId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Final.Models.Product_Order", b =>
                {
                    b.Property<string>("countingUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("orderId")
                        .HasColumnType("int");

                    b.Property<int?>("productId")
                        .HasColumnType("int");

                    b.Property<string>("productId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("total")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("orderId");

                    b.HasIndex("productId1");

                    b.ToTable("Product_Orders");
                });

            modelBuilder.Entity("Final.Models.Refund", b =>
                {
                    b.Property<int?>("refundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("refundId"));

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("orderId")
                        .HasColumnType("int");

                    b.Property<int?>("productId")
                        .HasColumnType("int");

                    b.Property<string>("productId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("refundId");

                    b.HasIndex("orderId");

                    b.HasIndex("productId1");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Final.Models.RetailChain", b =>
                {
                    b.Property<int?>("retailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("retailId"));

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("retailId");

                    b.ToTable("RetailChains");
                });

            modelBuilder.Entity("Final.Models.Staff", b =>
                {
                    b.Property<int?>("staffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("staffId"));

                    b.Property<int?>("personId")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("staffId");

                    b.HasIndex("personId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Final.Models.Supplier", b =>
                {
                    b.Property<int?>("supplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("supplierId"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("supplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Final.Models.Supplying", b =>
                {
                    b.Property<int?>("supplyingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("supplyingId"));

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("arrivedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("hasArrived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("orderedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("productId")
                        .HasColumnType("int");

                    b.Property<string>("productId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("supplierId")
                        .HasColumnType("int");

                    b.HasKey("supplyingId");

                    b.HasIndex("productId1");

                    b.HasIndex("supplierId");

                    b.ToTable("Supplyings");
                });

            modelBuilder.Entity("Final.Models.Customer", b =>
                {
                    b.HasOne("Final.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("personId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Final.Models.EmployedAt", b =>
                {
                    b.HasOne("Final.Models.RetailChain", "RetailChain")
                        .WithMany()
                        .HasForeignKey("RetailChainretailId");

                    b.HasOne("Final.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("staffId");

                    b.Navigation("RetailChain");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Final.Models.Inventory", b =>
                {
                    b.HasOne("Final.Models.RetailChain", "RetailChain")
                        .WithMany()
                        .HasForeignKey("RetailChainretailId");

                    b.HasOne("Final.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId1");

                    b.Navigation("Product");

                    b.Navigation("RetailChain");
                });

            modelBuilder.Entity("Final.Models.Order", b =>
                {
                    b.HasOne("Final.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("personId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Final.Models.Product_Order", b =>
                {
                    b.HasOne("Final.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId");

                    b.HasOne("Final.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId1");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Final.Models.Refund", b =>
                {
                    b.HasOne("Final.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId");

                    b.HasOne("Final.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId1");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Final.Models.Staff", b =>
                {
                    b.HasOne("Final.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("personId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Final.Models.Supplying", b =>
                {
                    b.HasOne("Final.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId1");

                    b.HasOne("Final.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("supplierId");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
